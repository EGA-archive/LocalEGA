import org.apache.commons.codec.digest.Crypt
import org.apache.commons.codec.digest.DigestUtils
import org.apache.commons.io.FileUtils

import java.nio.ByteBuffer
import java.nio.charset.Charset
import java.security.KeyPair
import java.security.KeyPairGenerator
import java.security.SecureRandom

def generateUser(String username) {
    KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA")
    keyPairGenerator.initialize(2048, new SecureRandom())
    KeyPair keyPair = keyPairGenerator.genKeyPair()

    String sshKeyString = "ssh-rsa " + Base64.getEncoder().encodeToString(keyPair.public.encoded)

    String password = UUID.randomUUID().toString().replace("-", "")
    String salt = UUID.randomUUID().toString().replace("-", "")
    String hash = Crypt.crypt(password, "\$1\$${salt}\$")

    File userYML = new File("${project.projectDir.toString()}/.tmp/users/${username}.yml")
    FileUtils.writeLines(userYML, Arrays.asList("---", "password_hash: " + hash, "pubkey: " + sshKeyString))
    writePublicKey(keyPair, "${project.projectDir.toString()}/.tmp/users/pgp/${username}.pub")
    writePrivateKey(keyPair, "${project.projectDir.toString()}/.tmp/users/pgp/${username}.sec")

    return password
}


def writeTrace(String key, String value) {
    File traceFile = new File("${project.projectDir.toString()}/.tmp/.trace")
    String existingValue = readTrace(traceFile, key)
    if (existingValue == null) {
        FileUtils.writeLines(traceFile, Collections.singleton(String.format("%s=%s", key, value)), true)
    }
}

def readTrace(File traceFile, String key) {
    try {
        List<String> lines = FileUtils.readLines(traceFile, Charset.defaultCharset())
        for (String line : lines) {
            if (line.startsWith(key)) {
                return line.split("=")[1].trim()
            }
        }
        return null
    } catch (FileNotFoundException e) {
        return null
    }
}

def readTrace(String key) {
    File traceFile = new File("${project.projectDir.toString()}/.tmp/.trace")
    readTrace(traceFile, key)
}

def getTraceAsMAp() {
    File traceFile = new File("${project.projectDir.toString()}/.tmp/.trace")
    List<String> lines = FileUtils.readLines(traceFile, Charset.defaultCharset())
    Map<String, String> result = new HashMap<>()
    for (String line : lines) {
        result.put(line.split("=")[0].trim(), line.split("=")[1].trim())
    }
    result
}

task clearCEGAConfiguration {
    doLast {
        def result = exec {
            ignoreExitValue = true
            executable "docker"
            args "config", "rm", "cega.defs.json", "cega.rabbitmq.config", "eureka.py", "server.py", "users.html", "john.yml", "jane.yml"
        }
        if (result.exitValue == 0) {
            delete "${project.projectDir.toString()}/.tmp"
        }
    }
}

task createCEGAEurekaConfiguration {
    doLast {
        exec {
            workingDir "${project.projectDir.toString()}/../../docker/images/cega"
            ignoreExitValue = true
            executable "docker"
            args "config", "create", "eureka.py", "eureka.py"
        }
    }
}

task createCEGAUsersConfiguration {
    doLast {
        exec {
            workingDir "${project.projectDir.toString()}/../../docker/images/cega"
            ignoreExitValue = true
            executable "docker"
            args "config", "create", "server.py", "server.py"
        }

        exec {
            workingDir "${project.projectDir.toString()}/../../docker/images/cega"
            ignoreExitValue = true
            executable "docker"
            args "config", "create", "users.html", "users.html"
        }

        String johnPassword = generateUser("john")
        def result = exec {
            workingDir "${project.projectDir.toString()}/.tmp/users"
            ignoreExitValue = true
            executable "docker"
            args "config", "create", "john.yml", "john.yml"
        }
        if (result.exitValue == 0) {
            writeTrace("EGA_USER_PASSWORD_JOHN", johnPassword)
        }
        String janePassword = generateUser("jane")
        result = exec {
            workingDir "${project.projectDir.toString()}/.tmp/users"
            ignoreExitValue = true
            executable "docker"
            args "config", "create", "jane.yml", "jane.yml"
        }
        if (result.exitValue == 0) {
            writeTrace("EGA_USER_PASSWORD_JANE", janePassword)
        }
    }
}

task createCEGAMQConfiguration {
    doLast {
        byte[] saltBytes = new byte[4]
        new SecureRandom().nextBytes(saltBytes)
        String password = UUID.randomUUID().toString().replace("-", "")
        byte[] passwordBytes = password.getBytes()
        byte[] concat = ByteBuffer.allocate(saltBytes.length + passwordBytes.length).put(saltBytes).put(passwordBytes).array()
        byte[] hash = DigestUtils.sha256(concat)
        concat = ByteBuffer.allocate(saltBytes.length + hash.length).put(saltBytes).put(hash).array()
        String saltedHash = Base64.getEncoder().encodeToString(concat)

        mkdir "${project.projectDir.toString()}/.tmp/mq"
        File defsJSON = new File("${project.projectDir.toString()}/.tmp/mq/defs.json")
        FileUtils.write(defsJSON, "{\"rabbit_version\":\"3.6.11\",\n" +
                " \"users\":[{\"name\":\"lega\",\"password_hash\":\"${saltedHash}\",\"hashing_algorithm\":\"rabbit_password_hashing_sha256\",\"tags\":\"administrator\"}],\n" +
                " \"vhosts\":[{\"name\":\"lega\"}],\n" +
                " \"permissions\":[{\"user\":\"lega\", \"vhost\":\"lega\", \"configure\":\".*\", \"write\":\".*\", \"read\":\".*\"}],\n" +
                " \"parameters\":[],\n" +
                " \"global_parameters\":[{\"name\":\"cluster_name\", \"value\":\"rabbit@localhost\"}],\n" +
                " \"policies\":[],\n" +
                " \"queues\":[{\"name\":\"inbox\",           \"vhost\":\"lega\", \"durable\":true, \"auto_delete\":false, \"arguments\":{}},\n" +
                "           {\"name\":\"inbox.checksums\", \"vhost\":\"lega\", \"durable\":true, \"auto_delete\":false, \"arguments\":{}},\n" +
                "\t   {\"name\":\"files\",           \"vhost\":\"lega\", \"durable\":true, \"auto_delete\":false, \"arguments\":{}},\n" +
                "\t   {\"name\":\"completed\",       \"vhost\":\"lega\", \"durable\":true, \"auto_delete\":false, \"arguments\":{}},\n" +
                "\t   {\"name\":\"errors\",          \"vhost\":\"lega\", \"durable\":true, \"auto_delete\":false, \"arguments\":{}}],\n" +
                " \"exchanges\":[{\"name\":\"localega.v1\", \"vhost\":\"lega\", \"type\":\"topic\", \"durable\":true, \"auto_delete\":false, \"internal\":false, \"arguments\":{}}],\n" +
                " \"bindings\":[{\"source\":\"localega.v1\",\"vhost\":\"lega\",\"destination_type\":\"queue\",\"arguments\":{},\"destination\":\"inbox\",\"routing_key\":\"files.inbox\"},\n" +
                "\t     {\"source\":\"localega.v1\",\"vhost\":\"lega\",\"destination_type\":\"queue\",\"arguments\":{},\"destination\":\"inbox.checksums\",\"routing_key\":\"files.inbox.checksums\"},\n" +
                "\t     {\"source\":\"localega.v1\",\"vhost\":\"lega\",\"destination_type\":\"queue\",\"arguments\":{},\"destination\":\"files\",\"routing_key\":\"files\"},\n" +
                "\t     {\"source\":\"localega.v1\",\"vhost\":\"lega\",\"destination_type\":\"queue\",\"arguments\":{},\"destination\":\"completed\",\"routing_key\":\"files.completed\"},\n" +
                "\t     {\"source\":\"localega.v1\",\"vhost\":\"lega\",\"destination_type\":\"queue\",\"arguments\":{},\"destination\":\"errors\",\"routing_key\":\"files.error\"}]\n" +
                "}", Charset.defaultCharset())

        def result = exec {
            workingDir "${project.projectDir.toString()}/.tmp/mq"
            ignoreExitValue = true
            executable "docker"
            args "config", "create", "cega.defs.json", "defs.json"
        }
        if (result.exitValue == 0) {
            writeTrace("CEGA_MQ_PASSWORD", password)
        }

        File rabbitmqConfig = new File("${project.projectDir.toString()}/.tmp/mq/rabbitmq.config")
        FileUtils.write(rabbitmqConfig, "%% -*- mode: erlang -*-\n" +
                "%%\n" +
                "[{rabbit,[{loopback_users, [ ] },\n" +
                "\t  {disk_free_limit, \"1GB\"}]},\n" +
                " {rabbitmq_management, [ {load_definitions, \"/etc/rabbitmq/defs.json\"} ]}\n" +
                "].", Charset.defaultCharset())

        exec {
            workingDir "${project.projectDir.toString()}/.tmp/mq"
            ignoreExitValue = true
            executable "docker"
            args "config", "create", "cega.rabbitmq.config", "rabbitmq.config"
        }

        writeTrace("CEGA_REST_PASSWORD", UUID.randomUUID().toString().replace("-", ""))
    }
}

task createCEGAConfiguration {
    dependsOn clearCEGAConfiguration, createCEGAEurekaConfiguration, createCEGAUsersConfiguration, createCEGAMQConfiguration
}

task deployCEGAStack {
    doLast {
        String restPassword = readTrace("CEGA_REST_PASSWORD")
        exec {
            executable "docker"
            args "stack", "deploy", "--compose-file", "docker-stack.yml", "cega"
            environment "LEGA_INSTANCES": "lega", "CEGA_REST_lega_PASSWORD": restPassword
        }
    }
}

task removeCEGAStack {
    doLast {
        exec {
            executable "docker"
            args "stack", "rm", "cega"
        }
    }
}