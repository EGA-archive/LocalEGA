buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.bouncycastle:bcpg-jdk15on:1.59'
        classpath 'org.bouncycastle:bcpkix-jdk15on:1.59'
        classpath 'commons-io:commons-io:2.5'
        classpath 'commons-codec:commons-codec:1.11'
    }
}

task initBouncyCastle() {
    Security.addProvider(new BouncyCastleProvider())
}

task clean() {
    dependsOn ":cega:clearCEGAConfiguration", ":lega:clearLEGAConfiguration"
}

task bootstrap() {
    dependsOn ":cega:createCEGAConfiguration", ":lega:createLEGAConfiguration"
}

task deploy() {
    dependsOn ":cega:deployCEGAStack", ":lega:deployLEGAStack"
}

task rm() {
    doLast {
        exec {
            executable "docker"
            args "stack", "rm", "lega"
        }
        sleep 10000
        exec {
            executable "docker"
            args "stack", "rm", "cega"
        }
    }
}

task list() {
    doLast {
        exec {
            ignoreExitValue = true
            executable "docker"
            args "service", "list"
        }
    }
}

import org.apache.commons.io.FileUtils
import org.bouncycastle.asn1.pkcs.PrivateKeyInfo
import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo
import org.bouncycastle.bcpg.ArmoredOutputStream
import org.bouncycastle.bcpg.HashAlgorithmTags
import org.bouncycastle.bcpg.sig.Features
import org.bouncycastle.bcpg.sig.KeyFlags
import org.bouncycastle.crypto.generators.RSAKeyPairGenerator
import org.bouncycastle.crypto.params.RSAKeyGenerationParameters
import org.bouncycastle.jce.provider.BouncyCastleProvider
import org.bouncycastle.openpgp.*
import org.bouncycastle.openpgp.operator.PBESecretKeyEncryptor
import org.bouncycastle.openpgp.operator.PGPDigestCalculator
import org.bouncycastle.openpgp.operator.bc.BcPBESecretKeyEncryptorBuilder
import org.bouncycastle.openpgp.operator.bc.BcPGPContentSignerBuilder
import org.bouncycastle.openpgp.operator.bc.BcPGPDigestCalculatorProvider
import org.bouncycastle.openpgp.operator.bc.BcPGPKeyPair
import org.bouncycastle.util.io.pem.PemObject
import org.bouncycastle.util.io.pem.PemWriter

import java.nio.charset.Charset
import java.security.KeyPair
import java.security.KeyPairGenerator
import java.security.SecureRandom
import java.security.Security

def generateRSAKeyPair() {
    KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA", "BC")
    keyPairGenerator.initialize(2048, new SecureRandom())
    keyPairGenerator.genKeyPair()
}

def createPGPKeyRingGenerator(String userId, char[] passphrase) throws Exception {
    RSAKeyPairGenerator keyPairGenerator = new RSAKeyPairGenerator()

    keyPairGenerator.init(
            new RSAKeyGenerationParameters(
                    BigInteger.valueOf(0x10001),
                    new SecureRandom(),
                    1024,
                    12
            )
    )

    PGPKeyPair rsaKeyPairSign = new BcPGPKeyPair(
            PGPPublicKey.RSA_SIGN,
            keyPairGenerator.generateKeyPair(),
            new Date()
    )

    PGPKeyPair rsaKeyPairEncrypt = new BcPGPKeyPair(
            PGPPublicKey.RSA_ENCRYPT,
            keyPairGenerator.generateKeyPair(),
            new Date()
    )

    PGPSignatureSubpacketGenerator signHashGenerator = new PGPSignatureSubpacketGenerator()
    signHashGenerator.setKeyFlags(false, KeyFlags.SIGN_DATA | KeyFlags.CERTIFY_OTHER)
    signHashGenerator.setFeature(false, Features.FEATURE_MODIFICATION_DETECTION)

    PGPSignatureSubpacketGenerator encryptHashGenerator = new PGPSignatureSubpacketGenerator()
    encryptHashGenerator.setKeyFlags(false, KeyFlags.ENCRYPT_COMMS | KeyFlags.ENCRYPT_STORAGE)

    PGPDigestCalculator sha1DigestCalculator = new BcPGPDigestCalculatorProvider().get(HashAlgorithmTags.SHA1)
    PGPDigestCalculator sha512DigestCalculator = new BcPGPDigestCalculatorProvider().get(HashAlgorithmTags.SHA512)

    PBESecretKeyEncryptor secretKeyEncryptor = (
            new BcPBESecretKeyEncryptorBuilder(PGPEncryptedData.AES_256, sha512DigestCalculator)
    ).build(passphrase)

    PGPKeyRingGenerator keyRingGen = new PGPKeyRingGenerator(
            PGPSignature.NO_CERTIFICATION,
            rsaKeyPairSign,
            userId,
            sha1DigestCalculator,
            signHashGenerator.generate(),
            null,
            new BcPGPContentSignerBuilder(rsaKeyPairSign.getPublicKey().getAlgorithm(), HashAlgorithmTags.SHA512),
            secretKeyEncryptor
    )

    keyRingGen.addSubKey(rsaKeyPairEncrypt, encryptHashGenerator.generate(), null)

    return keyRingGen
}

def armorByteArray(byte[] data) {
    ByteArrayOutputStream encOut = new ByteArrayOutputStream()
    ArmoredOutputStream armorOut = new ArmoredOutputStream(encOut)
    armorOut.write(data)
    armorOut.flush()
    armorOut.close()
    encOut.toByteArray()
}

def writePublicKey(KeyPair keyPair, String path) {
    SubjectPublicKeyInfo spkInfo = SubjectPublicKeyInfo.getInstance(keyPair.public.encoded)
    byte[] publicKeyPKCS1 = spkInfo.parsePublicKey().encoded
    PemObject pemObject = new PemObject("RSA PUBLIC KEY", publicKeyPKCS1)
    StringWriter stringWriter = new StringWriter()
    PemWriter pemWriter = new PemWriter(stringWriter)
    pemWriter.writeObject(pemObject)
    pemWriter.close()
    String publicKeyString = stringWriter.toString()
    File file = new File(path)
    FileUtils.write(file, publicKeyString, Charset.defaultCharset())
}

def writePrivateKey(KeyPair keyPair, String path) {
    PrivateKeyInfo pkInfo = PrivateKeyInfo.getInstance(keyPair.private.encoded)
    byte[] privateKeyPKCS1 = pkInfo.parsePrivateKey().toASN1Primitive().encoded
    PemObject pemObject = new PemObject("RSA PRIVATE KEY", privateKeyPKCS1)
    StringWriter stringWriter = new StringWriter()
    PemWriter pemWriter = new PemWriter(stringWriter)
    pemWriter.writeObject(pemObject)
    pemWriter.close()
    String privateKeyString = stringWriter.toString()
    File file = new File(path)
    FileUtils.write(file, privateKeyString, Charset.defaultCharset())
}
