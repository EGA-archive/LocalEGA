version: '3.3'

networks:
  lega:
    driver: overlay
  cega_cega:
    external: true

services:

  mq:
    image: rabbitmq:3.6.14-management
    hostname: mq
    networks:
      - lega
      - cega_cega
    ports:
      - "15672:15672"
    deploy:
      restart_policy:
        condition: always
        delay: 5s
        window: 120s
    environment:
      - CEGA_CONNECTION
    configs:
      - source: lega.defs.json
        target: /etc/rabbitmq/defs.json
      - source: lega.rabbitmq.config
        target: /etc/rabbitmq/rabbitmq.config
      - source: lega.entrypoint.sh
        target: /usr/bin/ega-entrypoint.sh
    entrypoint: ["/bin/bash", "/usr/bin/ega-entrypoint.sh"]
    command: ["rabbitmq-server"]

  db:
    image: postgres:latest
    hostname: db
    networks:
      - lega
    deploy:
      restart_policy:
        condition: always
        delay: 5s
        window: 120s
    environment:
      - DB_INSTANCE
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    configs:
      - source: db.sql
        target: /docker-entrypoint-initdb.d/ega.sql

  inbox:
    image: nbisweden/ega-mina-inbox
    hostname: ega-inbox
    networks:
      - lega
      - cega_cega
    ports:
      - "2222:2222"
    deploy:
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: always
        delay: 5s
        window: 120s
    depends_on:
      - mq
    environment:
      - CEGA_ENDPOINT
      - CEGA_ENDPOINT_CREDS
    volumes:
      - inbox:/ega/inbox

  ingest:
    image: nbisweden/ega-base
    networks:
      - lega
    deploy:
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: always
        delay: 5s
        window: 120s
    depends_on:
      - db
      - mq
      - s3
    environment:
      - S3_ACCESS_KEY
      - S3_SECRET_KEY
    volumes:
       - inbox:/ega/inbox
    configs:
      - source: conf.ini
        target: /etc/ega/conf.ini
    entrypoint: ["gosu", "lega", "ega-ingest"]

  keys:
    image: nbisweden/ega-base
    hostname: keys
    networks:
      - lega
      - cega_cega
    deploy:
      restart_policy:
        condition: always
        delay: 5s
        window: 120s
    environment:
      - LEGA_PASSWORD
      - KEYS_PASSWORD
    configs:
      - source: conf.ini
        target: /etc/ega/conf.ini
      - source: keys.ini.enc
        target: /etc/ega/keys.ini.enc
      - source: ssl.cert
        target: /etc/ega/ssl.cert
      - source: ssl.key
        target: /etc/ega/ssl.key
      - source: ega.sec
        target: /etc/ega/pgp/ega.sec
      - source: ega2.sec
        target: /etc/ega/pgp/ega2.sec
    entrypoint: ["gosu","lega","ega-keyserver","--keys","/etc/ega/keys.ini.enc"]

  verify:
    image: nbisweden/ega-base
    hostname: verify
    networks:
      - lega
    deploy:
      restart_policy:
        condition: always
        delay: 5s
        window: 120s
    depends_on:
      - db
      - mq
      - inbox
      - keys
      - s3
    environment:
      - LEGA_PASSWORD
      - S3_ACCESS_KEY
      - S3_SECRET_KEY
    configs:
      - source: conf.ini
        target: /etc/ega/conf.ini
    entrypoint: ["gosu", "lega", "ega-verify"]

  s3:
    image: minio/minio
    hostname: s3
    networks:
      - lega
    ports:
      - "9000:9000"
    deploy:
      restart_policy:
        condition: always
        delay: 5s
        window: 120s
    environment:
      - MINIO_ACCESS_KEY
      - MINIO_SECRET_KEY
    volumes:
      - s3:/data
    command: server /data

  portainer:
    image: portainer/portainer
    ports:
        - "30000:9000"
    command: --no-auth
    deploy:
      placement:
        constraints: [node.role == manager]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer:/data

volumes:
  inbox:
  s3:
  portainer:

configs:
  lega.defs.json:
    external: true
  lega.rabbitmq.config:
    external: true
  lega.entrypoint.sh:
    external: true
  db.sql:
    external: true
  conf.ini:
    external: true
  keys.ini.enc:
    external: true
  ssl.cert:
    external: true
  ssl.key:
      external: true
  ega.sec:
    external: true
  ega2.sec:
      external: true