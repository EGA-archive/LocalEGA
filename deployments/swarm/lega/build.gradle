apply from: "$rootDir/utils.gradle"

task clearLEGAConfiguration {
    doLast {
        exec {
            ignoreExitValue = true
            executable "docker"
            args "config", "rm",
                    "lega.defs.json",
                    "lega.rabbitmq.config",
                    "lega.entrypoint.sh",
                    "db.sql",
                    "ssl.cert",
                    "ssl.key",
                    "ega.sec",
                    "ega2.sec",
                    "conf.ini",
                    "keys.ini"
        }
        delete "${project.projectDir.toString()}/.tmp"
    }
}

task createLEGAMQConfiguration {
    doLast {
        exec {
            workingDir "${project.projectDir.toString()}/../../docker/images/mq"
            ignoreExitValue = true
            executable "docker"
            args "config", "create", "lega.defs.json", "defs.json"
        }

        exec {
            workingDir "${project.projectDir.toString()}/../../docker/images/mq"
            ignoreExitValue = true
            executable "docker"
            args "config", "create", "lega.rabbitmq.config", "rabbitmq.config"
        }

        exec {
            workingDir "${project.projectDir.toString()}/../../docker/images/mq"
            ignoreExitValue = true
            executable "docker"
            args "config", "create", "lega.entrypoint.sh", "entrypoint.sh"
        }

        String cegaMQPassword = readTrace(new File("${project.projectDir.toString()}/../cega/.tmp/.trace"), "CEGA_MQ_PASSWORD")
        writeTrace("CEGA_CONNECTION", "amqp://lega:${cegaMQPassword}@cega-mq:5672/lega")
    }
}

task createLEGADBConfiguration {
    doLast {
        exec {
            workingDir "${project.projectDir.toString()}/../../../extras"
            ignoreExitValue = true
            executable "docker"
            args "config", "create", "db.sql", "db.sql"
        }

        writeTrace("DB_INSTANCE", "db")
        writeTrace("POSTGRES_USER", "lega")
        writeTrace("POSTGRES_PASSWORD", UUID.randomUUID().toString().replace("-", ""))
        writeTrace("POSTGRES_DB", "lega")
    }
}

task createLEGAInboxConfiguration {
    doLast {
        writeTrace("CEGA_ENDPOINT", "http://cega-users/user/")
        String cegaRESTPassword = readTrace(new File("${project.projectDir.toString()}/../cega/.tmp/.trace"), "CEGA_REST_PASSWORD")
        writeTrace("CEGA_ENDPOINT_CREDS", "lega:${cegaRESTPassword}")
    }
}

task createLEGAIngestConfiguration {
    doLast {
        writeTrace("S3_ACCESS_KEY", UUID.randomUUID().toString().replace("-", ""))
        writeTrace("S3_SECRET_KEY", UUID.randomUUID().toString().replace("-", ""))
    }
}

task createLEGAKeysConfiguration {
    doLast {
        generateSSLCertificate()
        exec {
            workingDir "${project.projectDir.toString()}/.tmp/ssl"
            ignoreExitValue = true
            executable "docker"
            args "config", "create", "ssl.cert", "ssl.cert"
        }
        exec {
            workingDir "${project.projectDir.toString()}/.tmp/ssl"
            ignoreExitValue = true
            executable "docker"
            args "config", "create", "ssl.key", "ssl.key"
        }
        String pgpPassphrase = UUID.randomUUID().toString().replace("-", "")
        generatePGPKeyPair("ega", pgpPassphrase)
        exec {
            workingDir "${project.projectDir.toString()}/.tmp/pgp"
            ignoreExitValue = true
            executable "docker"
            args "config", "create", "ega.sec", "ega.sec"
        }
        generatePGPKeyPair("ega2", pgpPassphrase)
        exec {
            workingDir "${project.projectDir.toString()}/.tmp/pgp"
            ignoreExitValue = true
            executable "docker"
            args "config", "create", "ega2.sec", "ega2.sec"
        }
        writeTrace("PGP_PASSPHRASE", pgpPassphrase)
        String masterPassphrase = UUID.randomUUID().toString().replace("-", "")
        writeTrace("LEGA_PASSWORD", masterPassphrase)
    }
}

task createLEGAMinioConfiguration {
    doLast {
        writeTrace("MINIO_ACCESS_KEY", readTrace("S3_ACCESS_KEY"))
        writeTrace("MINIO_SECRET_KEY", readTrace("S3_SECRET_KEY"))
    }
}

task createConfIni {
    dependsOn clearLEGAConfiguration,
            createLEGAMQConfiguration,
            createLEGADBConfiguration,
            createLEGAInboxConfiguration,
            createLEGAIngestConfiguration,
            createLEGAKeysConfiguration,
            createLEGAMinioConfiguration

    doLast {
        generateConfIni()

        exec {
            workingDir "${project.projectDir.toString()}/.tmp"
            ignoreExitValue = true
            executable "docker"
            args "config", "create", "conf.ini", "conf.ini"
        }
    }
}

task createKeysIni {
    dependsOn clearLEGAConfiguration,
            createLEGAMQConfiguration,
            createLEGADBConfiguration,
            createLEGAInboxConfiguration,
            createLEGAIngestConfiguration,
            createLEGAKeysConfiguration,
            createLEGAMinioConfiguration

    doLast {
        generateKeysIni()

        exec {
            workingDir "${project.projectDir.toString()}/.tmp"
            ignoreExitValue = true
            executable "docker"
            args "config", "create", "keys.ini", "keys.ini"
        }
    }
}

task createLEGAConfiguration {
    dependsOn clearLEGAConfiguration, createConfIni, createKeysIni
}

task deployLEGAStack {
    doLast {
        exec {
            executable "docker"
            args "stack", "deploy", "--compose-file", "docker-stack.yml", "lega"
            environment getTraceAsMAp()
        }
    }
}

task removeLEGAStack {
    doLast {
        exec {
            executable "docker"
            args "stack", "rm", "lega"
        }
        sleep 10000
        exec {
            ignoreExitValue = true
            executable "docker"
            args "volume", "rm", "lega_inbox", "lega_s3"
        }
    }
}