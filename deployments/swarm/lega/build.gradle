import org.apache.commons.io.FileUtils

import java.nio.charset.Charset

task clearLEGAConfiguration {
    doLast {
        def result = exec {
            ignoreExitValue = true
            executable "docker"
            args "config", "rm",
                    "lega.defs.json",
                    "lega.rabbitmq.config",
                    "lega.entrypoint.sh", 
                    "db.sql",
                    "ssl.cert",
                    "ssl.key",
                    "ega.sec",
                    "ega2.sec",
                    "conf.ini",
                    "keys.ini"
        }
        if (result.exitValue == 0) {
            delete ".tmp"
        }
    }
}

task createLEGAMQConfiguration {
    doLast {
        exec {
            workingDir "${project.projectDir.toString()}/../../docker/images/mq"
            ignoreExitValue = true
            executable "docker"
            args "config", "create", "lega.defs.json", "defs.json"
        }

        exec {
            workingDir "${project.projectDir.toString()}/../../docker/images/mq"
            ignoreExitValue = true
            executable "docker"
            args "config", "create", "lega.rabbitmq.config", "rabbitmq.config"
        }

        exec {
            workingDir "${project.projectDir.toString()}/../../docker/images/mq"
            ignoreExitValue = true
            executable "docker"
            args "config", "create", "lega.entrypoint.sh", "entrypoint.sh"
        }

        String cegaMQPassword = readTrace(new File("${project.projectDir.toString()}/../cega/.tmp/.trace"), "CEGA_MQ_PASSWORD")
        writeTrace("CEGA_CONNECTION", "amqp://lega:${cegaMQPassword}@cega-mq:5672/lega")
    }
}

task createLEGADBConfiguration {
    doLast {
        exec {
            workingDir "${project.projectDir.toString()}/../../../extras"
            ignoreExitValue = true
            executable "docker"
            args "config", "create", "db.sql", "db.sql"
        }

        writeTrace("DB_INSTANCE", "db")
        writeTrace("POSTGRES_USER", "lega")
        writeTrace("POSTGRES_PASSWORD", UUID.randomUUID().toString().replace("-", ""))
        writeTrace("POSTGRES_DB", "lega")
    }
}

task createLEGAInboxConfiguration {
    doLast {
        writeTrace("CEGA_ENDPOINT", "http://cega-users/user/")
        String cegaRESTPassword = readTrace(new File("${project.projectDir.toString()}/../cega/.tmp/.trace"), "CEGA_REST_PASSWORD")
        writeTrace("CEGA_ENDPOINT_CREDS", "lega:${cegaRESTPassword}")
    }
}

task createLEGAIngestConfiguration {
    doLast {
        writeTrace("S3_ACCESS_KEY", UUID.randomUUID().toString().replace("-", ""))
        writeTrace("S3_SECRET_KEY", UUID.randomUUID().toString().replace("-", ""))
    }
}

task createLEGAKeysConfiguration {
    doLast {
        generateSSLCertificate()
        exec {
            workingDir ".tmp/ssl"
            ignoreExitValue = true
            executable "docker"
            args "config", "create", "ssl.cert", "ssl.cert"
        }
        exec {
            workingDir ".tmp/ssl"
            ignoreExitValue = true
            executable "docker"
            args "config", "create", "ssl.key", "ssl.key"
        }
        String pgpPassphrase = UUID.randomUUID().toString().replace("-", "")
        generatePGPKeyPair("ega", pgpPassphrase)
        exec {
            workingDir ".tmp/pgp"
            ignoreExitValue = true
            executable "docker"
            args "config", "create", "ega.sec", "ega.sec"
        }
        generatePGPKeyPair("ega2", pgpPassphrase)
        exec {
            workingDir ".tmp/pgp"
            ignoreExitValue = true
            executable "docker"
            args "config", "create", "ega2.sec", "ega2.sec"
        }
        writeTrace("PGP_PASSPHRASE", pgpPassphrase)
        String masterPassphrase = UUID.randomUUID().toString().replace("-", "")
        writeTrace("LEGA_PASSWORD", masterPassphrase)
    }
}

task createConfIni {
    dependsOn clearLEGAConfiguration,
            createLEGAMQConfiguration,
            createLEGADBConfiguration,
            createLEGAInboxConfiguration,
            createLEGAIngestConfiguration,
            createLEGAKeysConfiguration

    doLast {
        File confIni = new File(".tmp/conf.ini")
        FileUtils.write(confIni, "[DEFAULT]\n" +
                "log = console\n" +
                "\n" +
                "[keyserver]\n" +
                "port = 8443\n" +
                "\n" +
                "[quality_control]\n" +
                "keyserver_endpoint = https://keys:8443/retrieve/%s/private\n" +
                "\n" +
                "[inbox]\n" +
                "location = /ega/inbox/%s\n" +
                "mode = 2750\n" +
                "\n" +
                "[vault]\n" +
                "driver = S3Storage\n" +
                "url = http://s3:9000\n" +
                "access_key = ${readTrace("S3_ACCESS_KEY")}\n" +
                "secret_key = ${readTrace("S3_SECRET_KEY")}\n" +
                "#region = lega\n" +
                "\n" +
                "\n" +
                "[outgestion]\n" +
                "# Just for test\n" +
                "keyserver_endpoint = https://keys:8443/retrieve/%s/private\n" +
                "\n" +
                "## Connecting to Local EGA\n" +
                "[broker]\n" +
                "host = mq\n" +
                "connection_attempts = 30\n" +
                "# delay in seconds\n" +
                "retry_delay = 10\n" +
                "\n" +
                "[postgres]\n" +
                "host = db\n" +
                "user = ${readTrace("DB_USER")}\n" +
                "password = ${readTrace("DB_PASSWORD")}\n" +
                "try = 30\n" +
                "\n" +
                "[eureka]\n" +
                "endpoint = http://cega-eureka:8761", Charset.defaultCharset())

        exec {
            workingDir ".tmp"
            ignoreExitValue = true
            executable "docker"
            args "config", "create", "conf.ini", "conf.ini"
        }
    }
}

task createKeysIni {
    dependsOn clearLEGAConfiguration,
            createLEGAMQConfiguration,
            createLEGADBConfiguration,
            createLEGAInboxConfiguration,
            createLEGAIngestConfiguration,
            createLEGAKeysConfiguration

    doLast {
        File keysIni = new File(".tmp/keys.ini")
        FileUtils.write(keysIni, "[DEFAULT]\n" +
                "active : key.1\n" +
                "\n" +
                "[key.1]\n" +
                "path : /etc/ega/pgp/ega.sec\n" +
                "passphrase : ${readTrace("PGP_PASSPHRASE")}\n" +
                "expire: 30/MAR/19 08:00:00\n" +
                "\n" +
                "[key.2]\n" +
                "path : /etc/ega/pgp/ega2.sec\n" +
                "passphrase : ${readTrace("PGP_PASSPHRASE")}\n" +
                "expire: 30/MAR/18 08:00:00", Charset.defaultCharset())

        exec {
            workingDir ".tmp"
            ignoreExitValue = true
            executable "docker"
            args "config", "create", "keys.ini", "keys.ini"
        }
    }
}

task createLEGAConfiguration {
    dependsOn clearLEGAConfiguration, createConfIni, createKeysIni
}

task deployLEGAStack {
    doLast {
        exec {
            executable "docker"
            args "stack", "deploy", "--compose-file", "docker-stack.yml", "lega"
        }
    }
}

task removeLEGAStack {
    doLast {
        exec {
            executable "docker"
            args "stack", "rm", "lega"
        }
    }
}