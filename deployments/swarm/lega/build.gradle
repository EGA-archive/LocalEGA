import se.nbis.lega.deployment.ClearConfigurationTask
import se.nbis.lega.deployment.DeployStackTask
import se.nbis.lega.deployment.RemoveStackTask
import se.nbis.lega.deployment.RemoveVolumesTask
import se.nbis.lega.deployment.lega.*

import java.util.stream.Collectors

apply from: "$rootDir/utils.gradle"

task removeVolumes(type: RemoveVolumesTask) {
    group "lega"

    setVolumes Arrays.stream(Volume.values()).map { v -> v.getName() }.collect(Collectors.toSet())
}

task clearConfiguration(type: ClearConfigurationTask) {
    group "lega"

    setConfigs Arrays.stream(Config.values()).map { c -> c.getName() }.collect(Collectors.toSet())
}

task createMQConfiguration(type: CreateMQConfigurationTask)

task createDBConfiguration(type: CreateDBConfigurationTask)

task createInboxConfiguration(type: CreateInboxConfigurationTask)

task createIngestConfiguration(type: CreateIngestConfigurationTask)

task createKeysConfiguration(type: CreateKeysConfigurationTask)

task createMinioConfiguration(type: CreateMinioConfigurationTask)

task createConfIni {
    group "lega"

    dependsOn clearConfiguration,
            createMQConfiguration,
            createDBConfiguration,
            createInboxConfiguration,
            createIngestConfiguration,
            createKeysConfiguration,
            createMinioConfiguration

    doLast {
        generateConfIni()

        exec {
            workingDir "${project.projectDir.toString()}/.tmp"
            ignoreExitValue = true
            executable "docker"
            args "config", "create", "conf.ini", "conf.ini"
        }
    }
}

task createKeysIni {
    group "lega"

    dependsOn clearConfiguration,
            createMQConfiguration,
            createDBConfiguration,
            createInboxConfiguration,
            createIngestConfiguration,
            createKeysConfiguration,
            createMinioConfiguration

    doLast {
        generateKeysIni()

        String keysPassphrase = UUID.randomUUID().toString().replace("-", "")
        writeTrace("KEYS_PASSWORD", keysPassphrase)

        encryptAES(new File("${project.projectDir.toString()}/.tmp/keys.ini"),
                new File("${project.projectDir.toString()}/.tmp/keys.ini.enc"),
                keysPassphrase)

        exec {
            workingDir "${project.projectDir.toString()}/.tmp"
            ignoreExitValue = true
            executable "docker"
            args "config", "create", "keys.ini.enc", "keys.ini.enc"
        }
    }
}

task createConfiguration {
    group "lega"

    dependsOn clearConfiguration, createConfIni, createKeysIni
}

task deployStack(type: DeployStackTask) {
    group "lega"

    setComposeFile file("docker-stack.yml").absolutePath
    setStackName "lega"
    setEnvironment getTraceAsMAp()
}

task removeStack(type: RemoveStackTask) {
    group "lega"

    setStackName "lega"
}