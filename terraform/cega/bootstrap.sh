#!/usr/bin/env bash
set -e

HERE=$(dirname ${BASH_SOURCE[0]})
CREDS=${HERE}/../snic.rc
PRIVATE=${HERE}/private

# Defaults
VERBOSE=no
FORCE=yes
OPENSSL=openssl

function usage {
    echo "Usage: $0 [options] <instance> <instance>..."
    echo -e "\nOptions are:"
    echo -e "\t--openssl <value>   \tPath to the Openssl executable [Default: ${OPENSSL}]"
    echo ""
    echo -e "\t--creds <value>     \tPath to the credentials to the cloud [Default: ${CREDS}]"
    echo ""
    echo -e "\t--verbose, -v       \tShow verbose output"
    echo -e "\t--polite, -p        \tDo not force the re-creation of the subfolders. Ask instead"
    echo -e "\t--help, -h          \tOutputs this message and exits"
    echo ""
}

# While there are arguments or '--' is reached
while [[ $# -gt 0 ]]; do
    case "$1" in
        --help|-h) usage; exit 0;;
        --verbose|-v) VERBOSE=yes;;
        --polite|-p) FORCE=no;;
        --openssl) OPENSSL=$2; shift;;
        --creds) CREDS=$2; shift;;
        --creds) CREDS=$2; shift;;
        *) break;;
    esac
    shift
done

# The rest of the parameters are the instances
INSTANCES=($@)

[[ $VERBOSE == 'no' ]] && echo -en "Bootstrapping "

source ${HERE}/../bootstrap/defs.sh

rm_politely ${PRIVATE}
mkdir -p ${PRIVATE}

exec 2>${PRIVATE}/.err

if [[ -f "${CREDS}" ]]; then
    source ${CREDS}
else
    echo "No credentials found"
    exit 1
fi

SETTINGS=${HERE}/$(basename ${CREDS})
if [[ -f "${SETTINGS}" ]]; then
    source ${SETTINGS}
else
    echo "No settings found [in ${SETTINGS}]"
    exit 1
fi

##############################################################
# Central EGA Users
##############################################################

echomsg "Generating fake Central EGA users"

[[ -x $(readlink ${OPENSSL}) ]] && echo "${OPENSSL} is not executable. Adjust the setting with --openssl" && exit 3

mkdir -p ${PRIVATE}/users

EGA_USER_PASSWORD_JOHN=$(generate_password 16)
EGA_USER_PASSWORD_JANE=$(generate_password 16)
EGA_USER_PASSWORD_TAYLOR=$(generate_password 16)

EGA_USER_PUBKEY_JOHN=${PRIVATE}/users/john.pub
EGA_USER_SECKEY_JOHN=${PRIVATE}/users/john.sec

EGA_USER_PUBKEY_JANE=${PRIVATE}/users/jane.pub
EGA_USER_SECKEY_JANE=${PRIVATE}/users/jane.sec

${OPENSSL} genrsa -out ${EGA_USER_SECKEY_JOHN} -passout pass:${EGA_USER_PASSWORD_JOHN} 2048
${OPENSSL} rsa -in ${EGA_USER_SECKEY_JOHN} -passin pass:${EGA_USER_PASSWORD_JOHN} -pubout -out ${EGA_USER_PUBKEY_JOHN}
chmod 400 ${EGA_USER_SECKEY_JOHN}

${OPENSSL} genrsa -out ${EGA_USER_SECKEY_JANE} -passout pass:${EGA_USER_PASSWORD_JANE} 2048
${OPENSSL} rsa -in ${EGA_USER_SECKEY_JANE} -passin pass:${EGA_USER_PASSWORD_JANE} -pubout -out ${EGA_USER_PUBKEY_JANE}
chmod 400 ${EGA_USER_SECKEY_JANE}

cat > ${PRIVATE}/users/john.yml <<EOF
---
password_hash: $(${OPENSSL} passwd -1 ${EGA_USER_PASSWORD_JOHN})
pubkey: $(ssh-keygen -i -mPKCS8 -f ${EGA_USER_PUBKEY_JOHN})
EOF

cat > ${PRIVATE}/users/jane.yml <<EOF
---
pubkey: $(ssh-keygen -i -mPKCS8 -f ${EGA_USER_PUBKEY_JANE})
EOF

cat > ${PRIVATE}/users/taylor.yml <<EOF
---
password_hash: $(${OPENSSL} passwd -1 ${EGA_USER_PASSWORD_TAYLOR})
EOF

mkdir -p ${PRIVATE}/users/{swe1,fin1}
# They all have access to SWE1
( # In a subshell
    cd ${PRIVATE}/users/swe1
    ln -s ../john.yml .
    ln -s ../jane.yml .
    ln -s ../taylor.yml .
)
# John has also access to FIN1
(
    cd ${PRIVATE}/users/fin1
    ln -s ../john.yml .
)

cat > ${PRIVATE}/.trace <<EOF
#####################################################################
#
# Generated by cega/bootstrap.sh
#
#####################################################################
PRIVATE_IP                = ${PRIVATE_IP}
#
EGA_USER_PASSWORD_JOHN    = ${EGA_USER_PASSWORD_JOHN}
EGA_USER_PUBKEY_JOHN      = ./private/users/john.pub
EGA_USER_PUBKEY_JANE      = ./private/users/jane.pub
EGA_USER_PASSWORD_TAYLOR  = ${EGA_USER_PASSWORD_TAYLOR}
# =============================
EOF

# And the CEGA files
{
    echo -n "LEGA_INSTANCES="
    join_by ',' ${INSTANCES[@]}
    echo
} > ${PRIVATE}/env


##############################################################
# Generate the configuration for each instance
##############################################################

declare -A CEGA_MQ_PASSWORD=()
declare -A CEGA_REST_PASSWORD=()
for INSTANCE in ${INSTANCES[@]}
do
    CEGA_MQ_PASSWORD[${INSTANCE}]=$(generate_password 16)
    echo "CEGA_${INSTANCE}_MQ_PASSWORD   = ${CEGA_MQ_PASSWORD[${INSTANCE}]}" >> ${PRIVATE}/.trace
    CEGA_REST_PASSWORD[${INSTANCE}]=$(generate_password 16)
    echo "CEGA_${INSTANCE}_REST_PASSWORD = ${CEGA_REST_PASSWORD[${INSTANCE}]}" >> ${PRIVATE}/env
done

##############################################################
# Central EGA Message Broker
##############################################################

echomsg "Generating passwords for the Message Broker"

function rabbitmq_hash {
    # 1) Generate a random 32 bit salt
    # 2) Concatenate that with the UTF-8 representation of the password
    # 3) Take the SHA-256 hash
    # 4) Concatenate the salt again
    # 5) Convert to base64 encoding
    local SALT=${2:-$(${OPENSSL:-openssl} rand -hex 4)}
    {
	printf ${SALT} | xxd -p -r
	( printf ${SALT} | xxd -p -r; printf $1 ) | ${OPENSSL:-openssl} dgst -binary -sha256
    } | base64
}

function output_password_hashes {
    declare -a tmp=()
    for INSTANCE in ${INSTANCES}
    do 
	CEGA_MQ_HASH=$(rabbitmq_hash $CEGA_MQ_PASSWORD[${INSTANCE}])
	tmp+=("{\"name\":\"cega_${INSTANCE}\",\"password_hash\":\"${CEGA_MQ_HASH}\",\"hashing_algorithm\":\"rabbit_password_hashing_sha256\",\"tags\":\"administrator\"}")
    done
    join_by ",\n" "${tmp[@]}"
}

function output_vhosts {
    declare -a tmp=()
    for INSTANCE in ${INSTANCES}
    do 
	tmp+=("{\"name\":\"${INSTANCE}\"}")
    done
    join_by "," "${tmp[@]}"
}

function output_permissions {
    declare -a tmp=()
    for INSTANCE in ${INSTANCES}
    do 
	tmp+=("{\"user\":\"cega_${INSTANCE}\", \"vhost\":\"${INSTANCE}\", \"configure\":\".*\", \"write\":\".*\", \"read\":\".*\"}")
    done
    join_by $',\n' "${tmp[@]}"
}

function output_queues {
    declare -a tmp=()
    for INSTANCE in ${INSTANCES}
    do
	tmp+=("{\"name\":\"${INSTANCE}.v1.commands.file\",      \"vhost\":\"${INSTANCE}\", \"durable\":true, \"auto_delete\":false, \"arguments\":{}}")
	tmp+=("{\"name\":\"${INSTANCE}.v1.commands.completed\", \"vhost\":\"${INSTANCE}\", \"durable\":true, \"auto_delete\":false, \"arguments\":{}}")
    done
    join_by $',\n' "${tmp[@]}"
}

function output_exchanges {
    declare -a tmp=()
    for INSTANCE in ${INSTANCES}
    do
	tmp+=("{\"name\":\"localega.v1\", \"vhost\":\"${INSTANCE}\", \"type\":\"topic\", \"durable\":true, \"auto_delete\":false, \"internal\":false, \"arguments\":{}}")
    done
    join_by $',\n' "${tmp[@]}"
}


function output_bindings {
    declare -a tmp=()
    for INSTANCE in ${INSTANCES}
    do
	tmp+=("{\"source\":\"localega.v1\",\"vhost\":\"${INSTANCE}\",\"destination_type\":\"queue\",\"arguments\":{},\"destination\":\"${INSTANCE}.v1.commands.file\",\"routing_key\":\"${INSTANCE}.file\"}")
	tmp+=("{\"source\":\"localega.v1\",\"vhost\":\"${INSTANCE}\",\"destination_type\":\"queue\",\"arguments\":{},\"destination\":\"${INSTANCE}.v1.commands.completed\",\"routing_key\":\"${INSTANCE}.completed\"}")
    done
    join_by $',\n' "${tmp[@]}"
}

{
    echo    '{"rabbit_version":"3.6.11",'
    echo -n ' "users":['; output_password_hashes; echo '],'
    echo -n ' "vhosts":['; output_vhosts; echo '],'
    echo -n ' "permissions":['; output_permissions; echo '],'
    echo    ' "parameters":[],'
    echo -n ' "global_parameters":[{"name":"cluster_name", "value":"rabbit@localhost"}],'
    echo    ' "policies":[],'
    echo -n ' "queues":['; output_queues; echo '],'
    echo -n ' "exchanges":['; output_exchanges; echo '],'
    echo -n ' "bindings":['; output_bindings; echo ']'
    echo    '}'
} > ${PRIVATE}/defs.json

##############################################################
# Terraform confs
##############################################################

echomsg "Generating Terraform configuration"

cat > ${HERE}/main.tf <<EOF
/* ===================================
   Main file for the Local EGA project
   =================================== */

terraform {
  backend "local" {
    path = ".terraform/cega.tfstate"
  }
}

# Configure the OpenStack Provider
provider "openstack" {
  user_name   = "${OS_USERNAME}"
  password    = "${OS_PASSWORD}"
  tenant_id   = "${OS_PROJECT_ID}"
  tenant_name = "${OS_PROJECT_NAME}"
  auth_url    = "${OS_AUTH_URL}"
  region      = "${OS_REGION_NAME}"
  domain_name = "${OS_USER_DOMAIN_NAME}"
}

# ========= Key Pair =========
resource "openstack_compute_keypair_v2" "cega_key" {
  name       = "cega-key"
  public_key = "${PUBKEY}"
}

# ========= Network =========
resource "openstack_networking_network_v2" "cega_net" {
  name           = "cega-net"
  admin_state_up = "true"
}

resource "openstack_networking_subnet_v2" "cega_subnet" {
  network_id  = "\${openstack_networking_network_v2.cega_net.id}"
  name        = "cega-subnet"
  cidr        = "${CIDR}"
  enable_dhcp = true
  ip_version  = 4
  dns_nameservers = ${DNS_SERVERS}
}

resource "openstack_networking_router_interface_v2" "cega_router_interface" {
  router_id = "${ROUTER_ID}"
  subnet_id = "\${openstack_networking_subnet_v2.cega_subnet.id}"
}

# ========= Security Groups =========

resource "openstack_compute_secgroup_v2" "cega" {
  name        = "cega"
  description = "Central EGA RabbitMQ and Users DB"

  rule {
    from_port   = 80
    to_port     = 80
    ip_protocol = "tcp"
    cidr        = "0.0.0.0/0"
  }
  rule {
    from_port   = 5672
    to_port     = 5672
    ip_protocol = "tcp"
    cidr        = "0.0.0.0/0"
  }
}

# ========= Machine =========

data "archive_file" "cega_users" {
  type        = "zip"
  output_path = "${PRIVATE}/cega_users.zip"
  source_dir = "${PRIVATE}/users"
}


data "template_file" "cloud_init" {
  template = "\${file("\${path.module}/cloud_init.tpl")}"

  vars {
    mq_defs     = "\${base64encode("\${file("${PRIVATE}/defs.json")}")}"
    cega_env    = "\${base64encode("\${file("${PRIVATE}/env")}")}"
    cega_server = "\${base64encode("\${file("\${path.module}/server.py")}")}"
    cega_users  = "\${base64encode("\${file("\${data.archive_file.cega_users.output_path}")}")}"
    cega_html   = "\${base64encode("\${file("\${path.module}/users.html")}")}"
    ega_slice   = "\${base64encode("\${file("../systemd/ega.slice")}")}"
    ega_service = "\${base64encode("\${file("../systemd/cega-users.service")}")}"
  }
}

resource "openstack_compute_instance_v2" "cega" {
  name        = "cega"
  flavor_name = "${FLAVOR}"
  image_name  = "${IMAGE}"
  key_pair  = "\${openstack_compute_keypair_v2.cega_key.name}"
  security_groups = ["default","\${openstack_compute_secgroup_v2.cega.name}"]
  network {
    uuid = "\${openstack_networking_network_v2.cega_net.id}"
    fixed_ip_v4 = "${PRIVATE_IP}"
  }
  user_data = "\${data.template_file.cloud_init.rendered}"
}

# ===== Floating IP =====
resource "openstack_networking_floatingip_v2" "fip" {
  pool = "${POOL}"
}
resource "openstack_compute_floatingip_associate_v2" "cega_fip" {
  floating_ip  = "\${openstack_networking_floatingip_v2.fip.address}"
  instance_id = "\${openstack_compute_instance_v2.cega.id}"
}
EOF

task_complete "Bootstrap complete"
