Encryption Algorithm
====================

The encryption procedure should be flexible and chosen independently
by each LocalEGA instance, if desired. Each site might indeed have its
own requirements.

In the current implementation, after checksuming an uploaded file, the
re-encryption procedure goes as follows. For an ingested file ``F``,
from a user's inbox, ``F`` is decrypted, as a stream, using the
LocalEGA's GPG private key, and the result is checksumed. While the
checksum is calculated, the stream chunks are re-encrypted using
AES-256 in CTR mode.

A random session key (of 256 bits) is generated to seed the AES
engine, in CTR mode. A nonce version is also randomly generated by the
engine. The random session key is encrypted using an RSA *master key*,
and both the encrypted session key and the nonce are prepended to the
result of the AES encryption.

Moreover, we prepend one line to the staged file with the following format::

  <key-id>|<session-key-size>|<nonce-size>|<block-cipher-mode>

For example, using master key ``1``, we prepend the line ``1|256|8|CTR``.
This line allows us to decrypt the file.

.. image:: /static/encryption.png
   :target: ../_static/encryption.png
   :alt: Encryption

Naturally, we can separate that line, as well as the encrypted session
key, from the staged file, making it harder for an attacker to decrypt
the vault files. For the moment, losing that information is
problematic, so we keep it in the vault file itself.

