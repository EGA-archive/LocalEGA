Encryption Algorithm
====================

The encryption procedure uses the Crypt4GH file format.

In the current implementation, after checksuming an uploaded file, the
re-encryption procedure goes as follows. For an ingested file ``F``,
from a user's inbox, ``F`` is decrypted, as a stream, using the
LocalEGA's GPG private key, and the result is checksumed. While the
checksum is calculated, the stream chunks are re-encrypted using
AES-256 in CTR mode.

A random session key (of 256 bits) is generated to seed the AES
engine, in CTR mode. A nonce version is also randomly generated by the
engine. The random session key is encrypted using an RSA *master key*,
and both the encrypted session key and the nonce are prepended to the
result of the AES encryption.

Moreover, we prepend one line to the staged file with the following format::

  <key-id>|<session-key-size>|<nonce-size>|<block-cipher-mode>

For example, using master key ``1``, we prepend the line ``1|256|8|CTR``.
This line allows us to decrypt the file.

.. image:: /static/encryption.png
   :target: ../_static/encryption.png
   :alt: Encryption

Naturally, we can separate that line, as well as the encrypted session
key, from the staged file, making it harder for an attacker to decrypt
the vault files. For the moment, losing that information is
problematic, so we keep it in the vault file itself.

OpenPGP
^^^^^^^
OpenPGP module based on RFC4880 https://tools.ietf.org/html/rfc4880.


Keyserver REST API
^^^^^^^^^^^^^^^^^^

Active keys endpoint (current key types supported are PGP and RSA):

* ``/active/<key_type>`` - GET request for the active key
* ``/active/<key_type>/private`` - GET request for the private part of the active key
* ``/active/<key_type>/public`` - GET request for the public part of the active key

Retrieve keys endpoint:

* ``/retrieve/<key_type>/<key_id>`` - GET request for the active PGP key with a known keyID of fingerprint
* ``/retrieve/<key_type>/<key_id>/private`` - GET request for the private part of the active PGP key with a known keyID of fingerprint
* ``/retrieve/<key_type>/<key_id>/public`` - GET request for the public part of the active PGP key with a known keyID of fingerprint

Admin endpoint:

* ``/admin/unlock`` - POST request to unlock a key with a known path
* ``/admin/ttl`` - GET request to check when keys will expire

Health Endpoint: ``/health`` will answer with ``200``

.. note:: Example Request/Response are available illustrating response body content, note the similar structured content for both ``/active`` and ``/retrieve`` endpoints. In case the request is unsuccessful the response code is ``404``.
    Based on the response structure, retrieving either the public or private part of a PGP/RSA key is achieved by retaining in the response either the private or the public part of the key.

Example Request/Response
------------------------

``/active/pgp`` Request:

.. sourcecode:: http

  GET /active/pgp HTTP/1.1
  Host: localhost:443
  Accept: application/json

``/active/pgp`` Response:

.. sourcecode:: http

  HTTP/1.1 200 OK
  Content-Type: application/json
  Body:
    {
       "type":"rsa",
       "public":{
          "n": "305981375",
          "e": "00110"
       },
       "private":{
          "d": "0928550",
          "p": "2149",
          "q": "08097",
          "u": "8274"
       }
    }

``/active/rsa`` Request:

.. sourcecode:: http

  GET /active/rsa HTTP/1.1
  Host: localhost:443
  Accept: application/json

``/active/rsa`` Response:

.. sourcecode:: http

  HTTP/1.1 200 OK
  Content-Type: application/json
  Body:
    {
       "public":{
          "n":78909,
          "e":12412
       },
       "private":{
          "d":12412,
          "p":2141,
          "q":1235
       },
       "id":"rsa.key.1"
    }
